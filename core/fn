#!/bin/bash

sshc::add() {
  local name=$1
  local config_path=$2

  if [ -z "$name" ]; then
    log::error "[sshc::add] name is required"
    exit 1
  fi

  if [ -z "$config_path" ]; then
    log::error "[sshc::add] config_path is required"
    exit 1
  fi

  if [ ! -f "$config_path" ]; then
    log::error "[sshc::add] config_path is not a valid file"
    exit 1
  fi

  local cache_config=$PLUGIN_SSHC_LIST_DATA/$name
  if [ -f "$cache_config" ]; then
    log::error "[sshc::add] name($name) is already exist, please use another"
    exit 1
  fi

  cp $config_path $cache_config

  local current=$(cat $PLUGIN_SSHC_CURRENT)
  if [ "$current" = "" ]; then
    sshc::use $name
  fi
}

sshc::remove() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[sshc::remove] name is required"
    exit 1
  fi

  if [ "$name" = "default" ]; then
    log::error "[sshc::remove] cannot remove default"
    exit 1
  fi

  local current=$(sshc::current)
  local cache_config=$PLUGIN_SSHC_LIST_DATA/$name

  if [ -f "$cache_config" ]; then
    rm $cache_config
  fi

  if [ "$name" = "$current" ]; then
    echo "default" | fs::write $PLUGIN_SSHC_CURRENT 
  fi
}

sshc::list() {
  local list=$(ls $PLUGIN_SSHC_LIST_DATA)

  echo $list
}

sshc::use() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[sshc::use] name is required"
    exit 1
  fi

  local cache_config=$PLUGIN_SSHC_LIST_DATA/$name

  if [ ! -f "$cache_config" ]; then
    log::error "[sshc::use] config ${name} not found"
    exit 1
  fi

  echo "${name}" | fs::write $PLUGIN_SSHC_CURRENT 

  cp $cache_config $PLUGIN_SSHC_SSH_CONFIG
}

sshc::current() {
  local current=$(cat $PLUGIN_SSHC_CURRENT)

  if [ -z "$current" ]; then
    sshc::add default $PLUGIN_SSHC_SSH_CONFIG
    current=default
  fi

  echo $current
}

sshc::clear() {
  rm -rf $PLUGIN_SSHC_LIST_DATA/*

  echo > $PLUGIN_SSHC_CURRENT
}

sshc::has_auth() {
  local id=$1
  if [ -z "$id" ]; then 
    log::error "[sshc::has_auth] id is required"
    exit 1
  fi

  local id=$(cat $PLUGIN_SSHC_SSH_AUTHORIZED_KEYS_PATH | grep $id | awk '{print $3}')
  if [ -z "$id" ]; then
    echo "false"
  else
    echo "true"
  fi
}

sshc::add_auth() {
  local key=$@
  if [ -z "$key" ]; then 
    log::error "[sshc::add_auth] authorized key is required"
    exit 1
  fi

  echo $key | fs::append $PLUGIN_SSHC_SSH_AUTHORIZED_KEYS_PATH
}

sshc::remove_auth() {
  local id=$1
  if [ -z "$id" ]; then 
    log::error "[sshc::remove_auth] id is required"
    exit 1
  fi

  if [ "$(sshc::has_auth $id)" = "false" ]; then
    log::error "[sshc::remove_auth] cannot found id(${id}), please check in $PLUGIN_SSHC_SSH_AUTHORIZED_KEYS_PATH"
    exit 1
  fi
  
  fs::remove_line_has_str $PLUGIN_SSHC_SSH_AUTHORIZED_KEYS_PATH "$id"
}

sshc::list_auth() {
  local index=1
  while read line; do
    local id=$(echo $line | awk '{print $3}')
    if [ -n "$id" ]; then
      log::success "$index - $id"
      index=$((index + 1))
    fi
  done < $PLUGIN_SSHC_SSH_AUTHORIZED_KEYS_PATH

  if [ "$index" = "1" ]; then
    log::error "cannot found any keys in $PLUGIN_SSHC_SSH_AUTHORIZED_KEYS_PATH"
  fi
}

export -f sshc::add
export -f sshc::remove
export -f sshc::list
export -f sshc::use
export -f sshc::clear

export -f sshc::current

# Authorized Key
export -f sshc::has_auth
export -f sshc::add_auth
export -f sshc::remove_auth
export -f sshc::list_auth
